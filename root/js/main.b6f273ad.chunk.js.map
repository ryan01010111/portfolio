{"version":3,"sources":["reportWebVitals.ts","TimeRangeSelector.tsx","Parent.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","tau","Math","PI","cx","cy","radius","maxVal","innerRingWidth","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","x","cos","y","sin","describeArc","startAngle","endAngle","endAngleInitial","start","end","arcSweep","abs","path","push","join","calculateHandleCenter","angle","TimeRangeSelector","width","startVal","endVal","openCloseTimes","setStartVal","setEndVal","unavailableVals","openCloseVals","map","time","replace","_match","hour","min","timeStrToVal","startActive","useRef","endActive","svg","calcCurrentAngle","e","current","nativeEvent","TouchEvent","preventDefault","svgBCR","getBoundingClientRect","scaleConstant","rmc","atan2","calculateMouseAngle","isTouchEvent","touches","clientX","left","clientY","top","updateSelection","currentAngle","setter","rawValue","newValue","round","reqStart","reqEnd","every","existStart","existEnd","onStartDown","onEndDown","onMouseOrTouchMove","onMouseOrTouchUp","ref","id","version","baseProfile","xmlns","viewBox","height","onMouseUp","onTouchEnd","onMouseMove","onTouchMove","transform","r","strokeWidth","stroke","fill","prevEnd","floor","d","strokeLinecap","genUnavailableSlots","selectedDef","startHandleCoords","endHandleCoords","strokeDasharray","onMouseDown","onTouchStart","pointerEvents","genSelection","Array","_","index","fontSize","fontFamily","textAnchor","dominantBaseline","fontWeight","String","valToTimeStr","val","staticOpenCloseTimes","staticUnavailableVals","Parent","useState","style","display","flexDirection","justifyContent","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f273ad.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { FC, Fragment, useRef } from 'react';\r\n\r\nconst tau = 2 * Math.PI;\r\nconst cx = 200;\r\nconst cy = 200;\r\nconst radius = 176;\r\nconst minVal = 0;\r\nconst maxVal = 48;\r\nconst outerRingWidth = 46;\r\nconst innerRingWidth = 30;\r\n\r\nfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number) {\r\n  const angleInRadians = angleInDegrees * Math.PI / 180;\r\n  const x = centerX + (radius * Math.cos(angleInRadians));\r\n  const y = centerY + (radius * Math.sin(angleInRadians));\r\n  return { x, y };\r\n}\r\n\r\nfunction describeArc(x: number, y: number, radius: number, startAngle: number, endAngle: number) {\r\n  const endAngleInitial = endAngle;\r\n\r\n  if (endAngleInitial - startAngle === 360) {\r\n    endAngle = 359;\r\n  }\r\n\r\n  const start = polarToCartesian(x, y, radius, endAngle);\r\n  const end = polarToCartesian(x, y, radius, startAngle);\r\n  const arcSweep = endAngle > startAngle\r\n    ? endAngle - startAngle <= 180 ? '0' : '1'\r\n    : Math.abs(endAngle - startAngle) <= 180 ? '1' : '0'\r\n\r\n  const path = [\r\n    'M', start.x, start.y,\r\n    'A', radius, radius, 0, arcSweep, 0, end.x, end.y\r\n  ];\r\n\r\n  if (endAngleInitial - startAngle === 360) {\r\n    path.push('z');\r\n  }\r\n\r\n  return path.join(' ');\r\n}\r\n\r\nfunction calculateHandleCenter(angle: number, radius: number) {\r\n  const x = cx + Math.cos(angle) * radius;\r\n  const y = cy + Math.sin(angle) * radius;\r\n  return { x, y };\r\n}\r\n\r\nfunction calculateMouseAngle(rmc: { x: number, y: number }) {\r\n  const angle = Math.atan2(rmc.y - cy, rmc.x - cx);\r\n\r\n  if (angle > - tau / 2 && angle < - tau / 4) {\r\n    return angle + tau * 1.25;\r\n  }\r\n  else {\r\n    return angle + tau * 0.25;\r\n  }\r\n}\r\n\r\nfunction timeStrToVal(time: string) {\r\n  return +(time.replace(/(..):(..)/, (_match, hour, min) => {\r\n    return `${hour}${+min ? '.5' : ''}`;\r\n  })) * 2;\r\n}\r\n\r\ntype MouseOrTouchEvent = React.MouseEvent | React.TouchEvent;\r\n\r\nfunction isTouchEvent(e: MouseOrTouchEvent): e is React.TouchEvent {\r\n  return e.nativeEvent instanceof TouchEvent;\r\n}\r\n\r\nexport type OpenCloseTimes = [open: string, end: string];\r\n\r\nexport type UnavailableVals = [start: number, end: number][];\r\n\r\ninterface Props {\r\n  width: number,\r\n  startVal: number,\r\n  endVal: number,\r\n  setStartVal: (val: number) => void,\r\n  setEndVal: (val: number) => void,\r\n  openCloseTimes: OpenCloseTimes,\r\n  unavailableVals: UnavailableVals\r\n}\r\n\r\nconst TimeRangeSelector: FC<Props> = ({\r\n  width,\r\n  startVal,\r\n  endVal,\r\n  openCloseTimes,\r\n  setStartVal,\r\n  setEndVal,\r\n  unavailableVals\r\n}) => {\r\n  const openCloseVals = openCloseTimes.map(time => timeStrToVal(time));\r\n  const startActive = useRef(false);\r\n  const endActive = useRef(false);\r\n  const svg = useRef<SVGSVGElement>(null);\r\n\r\n  function genUnavailableSlots() {\r\n    let prevEnd = -1;\r\n    return [[openCloseVals[1], openCloseVals[0]], ...unavailableVals].map(([start, end]) => {\r\n      if (start === end) return null;\r\n      // if unavailable slots back-to-back, allow excess length of arcs to overlap\r\n      // else, add 1 to start value, or subtract 1 from end value to compensate for rounded stroke ends\r\n      if (start !== prevEnd) start++;\r\n      prevEnd = end;\r\n      if (end !== openCloseVals[1]) end--;\r\n\r\n      const startAngle = Math.floor((start / (maxVal - minVal)) * 360);\r\n      const endAngle = Math.floor((end / (maxVal - minVal)) * 360);\r\n      return (\r\n        <path key={`${start}-${end}`}\r\n          d={describeArc(cx, cy, radius, startAngle, endAngle)}\r\n          stroke=\"#abb0ba\"\r\n          strokeWidth={innerRingWidth}\r\n          strokeLinecap=\"round\"\r\n          fill=\"none\"\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  function genSelection() {\r\n    const startAngle = Math.floor((startVal / (maxVal - minVal)) * 360);\r\n    const endAngle = Math.floor((endVal / (maxVal - minVal)) * 360);\r\n\r\n    const selectedDef = describeArc(cx, cy, radius, startAngle, endAngle);\r\n    const startHandleCoords = calculateHandleCenter(startAngle * tau / 360, radius);\r\n    const endHandleCoords = calculateHandleCenter(endAngle * tau / 360, radius);\r\n\r\n    return (<>\r\n      <path d={selectedDef}\r\n        strokeDasharray=\"8 2\"\r\n        stroke=\"#8cde12\"\r\n        strokeWidth={innerRingWidth}\r\n        fill=\"none\"\r\n      />\r\n      <circle\r\n        id=\"handle-start\"\r\n        cx={startHandleCoords.x}\r\n        cy={startHandleCoords.y}\r\n        r={innerRingWidth / 2}\r\n        strokeWidth=\"20\"\r\n        stroke=\"transparent\"\r\n        fill=\"#8cde12\"\r\n        onMouseDown={onStartDown}\r\n        onTouchStart={onStartDown}\r\n      >\r\n      </circle>\r\n      <circle\r\n        cx={startHandleCoords.x}\r\n        cy={startHandleCoords.y}\r\n        r={(innerRingWidth / 2) - 6}\r\n        stroke=\"#fff\"\r\n        strokeWidth=\"1\"\r\n        fill=\"none\"\r\n        pointerEvents=\"none\"\r\n      />\r\n      <circle\r\n        id=\"handle-end\"\r\n        cx={endHandleCoords.x}\r\n        cy={endHandleCoords.y}\r\n        r={innerRingWidth / 2}\r\n        strokeWidth=\"20\"\r\n        stroke=\"transparent\"\r\n        fill=\"#8cde12\"\r\n        onMouseDown={onEndDown}\r\n        onTouchStart={onEndDown}\r\n      />\r\n      <circle\r\n        cx={endHandleCoords.x}\r\n        cy={endHandleCoords.y}\r\n        r={(innerRingWidth / 2) - 6}\r\n        stroke=\"#fff\"\r\n        strokeWidth=\"1\"\r\n        fill=\"none\"\r\n        pointerEvents=\"none\"\r\n      />\r\n    </>)\r\n  }\r\n\r\n  function getDurationStr() {\r\n    const diff = endVal >= startVal\r\n      ? (endVal - startVal)\r\n      : maxVal - startVal + endVal;\r\n    const durationHrs = diff * 30 / 60;\r\n    return String(durationHrs)\r\n      .replace(/([0-9]+)(\\.[0-9]+)?/, (_match, hour, min) => {\r\n        return `${hour} h${min ? ' 30 min' : ''}`\r\n      });\r\n  }\r\n\r\n  function calcCurrentAngle(e: MouseOrTouchEvent) {\r\n    if (!svg.current) return;\r\n    if (!(e.nativeEvent instanceof TouchEvent)) e.preventDefault();\r\n    const svgBCR = svg.current.getBoundingClientRect();\r\n    const scaleConstant = (400 - width) / width;\r\n\r\n    // when selector is positioned relative to viewport: use clientX/clientY\r\n    // when selector is positioned within normal flow of document: use pageX/pageY\r\n    const rmc = isTouchEvent(e)\r\n      ? {\r\n        x: e.touches[0].clientX - svgBCR.left + ((e.touches[0].clientX - svgBCR.left) * scaleConstant),\r\n        y: e.touches[0].clientY - svgBCR.top + ((e.touches[0].clientY - svgBCR.top) * scaleConstant),\r\n      }\r\n      : {\r\n        x: e.clientX - svgBCR.left + ((e.clientX - svgBCR.left) * scaleConstant),\r\n        y: e.clientY - svgBCR.top + ((e.clientY - svgBCR.top) * scaleConstant),\r\n      };\r\n    return calculateMouseAngle(rmc) * 0.999;\r\n  }\r\n\r\n  function updateSelection(e: MouseOrTouchEvent) {\r\n    const currentAngle = calcCurrentAngle(e);\r\n    if (!currentAngle) return;\r\n\r\n    const range = maxVal - minVal;\r\n    const rawValue = currentAngle / tau * range;\r\n    const steps = Math.round(rawValue / 1);\r\n    const newValue = minVal + steps;\r\n\r\n    let reqStart = startVal;\r\n    let reqEnd = endVal;\r\n    let setter: typeof setStartVal | typeof setEndVal;\r\n    if (startActive.current) {\r\n      reqStart = newValue;\r\n      setter = setStartVal;\r\n    } else {\r\n      reqEnd = newValue;\r\n      setter = setEndVal;\r\n    }\r\n\r\n    // requires further work for support of available slots crossing midnight \r\n    if (reqStart >= reqEnd || reqStart < openCloseVals[0] || reqEnd > openCloseVals[1]) {\r\n      return;\r\n    }\r\n\r\n    const isAvailable = unavailableVals.every(([existStart, existEnd]) => {\r\n      if (reqStart < existStart) {\r\n        if (reqEnd > existStart) {\r\n          if (reqEnd > existEnd && reqStart < existEnd) {\r\n            if (startActive.current) {\r\n              setStartVal(existStart - 1);\r\n              setEndVal(existStart);\r\n            } else {\r\n              setStartVal(existEnd);\r\n              setEndVal(reqEnd);\r\n            }\r\n          }\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      } else {\r\n        if (reqStart < existEnd) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    });\r\n    if (isAvailable) setter(newValue);\r\n  }\r\n\r\n  const onStartDown = (e: MouseOrTouchEvent) => {\r\n    if (startActive.current) return;\r\n    startActive.current = true;\r\n    updateSelection(e);\r\n  }\r\n\r\n  const onEndDown = (e: MouseOrTouchEvent) => {\r\n    if (endActive.current) return;\r\n    endActive.current = true;\r\n    updateSelection(e);\r\n  }\r\n\r\n  const onMouseOrTouchMove = (e: MouseOrTouchEvent) => {\r\n    if (!startActive.current && !endActive.current) return;\r\n    updateSelection(e);\r\n  }\r\n\r\n  const onMouseOrTouchUp = () => {\r\n    startActive.current = false;\r\n    endActive.current = false;\r\n  }\r\n\r\n  return (\r\n    <svg ref={svg} id=\"time-range-selector\" version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 400 400\"\r\n      width={width}\r\n      height={width}\r\n      onMouseUp={onMouseOrTouchUp}\r\n      onTouchEnd={onMouseOrTouchUp}\r\n      onMouseMove={onMouseOrTouchMove}\r\n      onTouchMove={onMouseOrTouchMove}\r\n    >\r\n\r\n      <g transform={`rotate(-90, ${cx}, ${cy})`}>\r\n        <circle\r\n          cx={cx}\r\n          cy={cy}\r\n          r={radius}\r\n          strokeWidth={outerRingWidth}\r\n          stroke=\"#e1e8f5\"\r\n          fill=\"none\"\r\n        />\r\n        <circle\r\n          cx={cx}\r\n          cy={cy}\r\n          r={radius}\r\n          strokeWidth={innerRingWidth}\r\n          stroke=\"#5d8ff5\"\r\n          fill=\"none\"\r\n        />\r\n        {genUnavailableSlots()}\r\n        {startVal >= 0 && genSelection()}\r\n      </g>\r\n      {[...new Array(maxVal)].map((_, index) => (<Fragment key={index}>\r\n        <path\r\n          d={`M ${cx} ${cy + radius - innerRingWidth - 4} v 8`}\r\n          strokeWidth={index % 2 ? 1 : 2}\r\n          stroke=\"#888\"\r\n          transform={`rotate(${index * 7.5}, ${cx}, ${cy})`}\r\n        />\r\n        {!(index % 4) && (\r\n          <text\r\n            x={cx + (radius - 48) * Math.sin((-index * 7.5 + 180) * (Math.PI / 180))}\r\n            y={cy + (radius - 48) * Math.cos((-index * 7.5 + 180) * (Math.PI / 180))}\r\n            fontSize=\"16\"\r\n            fontFamily=\"Segoe UI, Roboto, sans-serif\"\r\n            fill=\"#888\"\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"middle\"\r\n          >\r\n            {index / 2}\r\n          </text>)}\r\n      </Fragment>))}\r\n      <text\r\n        x={cx}\r\n        y={cy}\r\n        fontFamily=\"Segoe UI, Roboto, sans-serif\"\r\n        fontSize=\"24\"\r\n        fontWeight=\"600\"\r\n        textAnchor=\"middle\"\r\n        dominantBaseline=\"middle\"\r\n      >\r\n        {getDurationStr()}\r\n      </text>\r\n\r\n    </svg >\r\n  );\r\n}\r\n\r\nexport default TimeRangeSelector;\r\n","import { CSSProperties, useState } from 'react';\nimport TimeRangeSelector from './TimeRangeSelector';\nimport './App.css';\n\nfunction valToTimeStr(val: number) {\n    return String(val / 2).replace(/([0-9]+)(\\..+)?/, (_match, hour, min) => {\n        return `${hour}${min ? ':30' : ':00'}`;\n    });\n}\n\n// static data\nconst staticOpenCloseTimes: [string, string] = ['08:00', '23:00'];\nconst staticUnavailableVals: [number, number][] = [[34, 40]];\n\nfunction Parent() {\n  const [startVal, setStartVal] = useState(20);\n  const [endVal, setEndVal] = useState(30);\n\n  const containerStyles: CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n\n  return (\n    <div id=\"trs-container\" style={containerStyles}>\n      <div id=\"trs-selection\">\n        {valToTimeStr(startVal)}&emsp;&ndash;&emsp;{valToTimeStr(endVal)}\n      </div>\n      <TimeRangeSelector\n        width={300}\n        startVal={startVal}\n        endVal={endVal}\n        setStartVal={setStartVal}\n        setEndVal={setEndVal}\n        openCloseTimes={staticOpenCloseTimes}\n        unavailableVals={staticUnavailableVals}\n      />\n    </div>\n  );\n}\n\nexport default Parent;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Parent from './Parent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Parent />\n  </React.StrictMode>,\n  document.getElementById('trs-root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}